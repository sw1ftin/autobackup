import os
import time
import schedule
import telegram
import github
from github import Github
from datetime import datetime
from dotenv import load_dotenv
import shutil
import logging
import requests
import hashlib
import argparse
import asyncio

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    filename='backup.log'
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env
GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
REPO_NAME = os.getenv('GITHUB_REPO_NAME')

def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram"""
    try:
        bot = telegram.Bot(token=TELEGRAM_BOT_TOKEN)
        bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message)
        logging.info("Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {str(e)}")

def check_github_token():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ GitHub —Ç–æ–∫–µ–Ω–∞"""
    try:
        g = Github(GITHUB_TOKEN)
        g.get_user().login
        return True
    except github.GithubException:
        send_telegram_message("‚ö†Ô∏è GitHub —Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω.")
        return False

def find_marzban_path():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø—É—Ç–∏ –∫ Marzban"""
    possible_paths = [
        "/opt/marzban",
        "/root/marzban",
        "/var/lib/marzban"
    ]
    
    for path in possible_paths:
        if os.path.exists(path):
            logging.info(f"–ù–∞–π–¥–µ–Ω –ø—É—Ç—å Marzban: {path}")
            return path
            
    logging.warning("–ü—É—Ç—å –∫ Marzban –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return None

def find_amnezia_path():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø—É—Ç–∏ –∫ AmneziaVPN"""
    possible_paths = [
        "/opt/amnezia",
        "/var/lib/amnezia",
        "/root/amnezia"
    ]
    
    for path in possible_paths:
        if os.path.exists(path):
            logging.info(f"–ù–∞–π–¥–µ–Ω –ø—É—Ç—å AmneziaVPN: {path}")
            return path
            
    logging.warning("–ü—É—Ç—å –∫ AmneziaVPN –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return None

def backup_marzban_mysql():
    """–ë—ç–∫–∞–ø MySQL –±–∞–∑—ã Marzban"""
    try:
        if os.path.exists("/var/lib/marzban/mysql"):
            env_path = "/opt/marzban/.env"
            if os.path.exists(env_path):
                # –ß—Ç–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è MySQL –∏–∑ .env —Ñ–∞–π–ª–∞
                with open(env_path, 'r') as f:
                    for line in f:
                        if line.startswith('MYSQL_ROOT_PASSWORD='):
                            mysql_password = line.split('=')[1].strip()
                            break
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–∞
                backup_dir = "/tmp/marzban_mysql_backup"
                os.makedirs(backup_dir, exist_ok=True)
                
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã mysqldump —á–µ—Ä–µ–∑ docker
                cmd = f"docker exec marzban-mysql-1 mysqldump -u root -p{mysql_password} --all-databases > {backup_dir}/all_databases.sql"
                os.system(cmd)
                
                return backup_dir
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ç–∫–∞–ø–µ MySQL: {str(e)}")
    return None

def create_backup():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –¥–∞–Ω–Ω—ã—Ö"""
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_dir = f'backup_{timestamp}'
    
    try:
        os.makedirs(backup_dir)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø—É—Ç–µ–π
        marzban_path = find_marzban_path()
        amnezia_path = find_amnezia_path()
        
        # –ë—ç–∫–∞–ø Marzban
        if marzban_path:
            shutil.copytree(marzban_path, f'{backup_dir}/marzban')
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±—ç–∫–∞–ø MySQL –µ—Å–ª–∏ –µ—Å—Ç—å
            mysql_backup = backup_marzban_mysql()
            if mysql_backup:
                shutil.copytree(mysql_backup, f'{backup_dir}/marzban_mysql')
                shutil.rmtree(mysql_backup)
        
        # –ë—ç–∫–∞–ø AmneziaVPN
        if amnezia_path:
            shutil.copytree(amnezia_path, f'{backup_dir}/amnezia')
        
        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        if not marzban_path and not amnezia_path:
            raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø—É—Ç–∏ –∫ Marzban –∏–ª–∏ AmneziaVPN")
        
        # –°–æ–∑–¥–∞—ë–º –∞—Ä—Ö–∏–≤
        archive_name = f'{backup_dir}.zip'
        shutil.make_archive(backup_dir, 'zip', backup_dir)
        
        return archive_name, backup_dir
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {str(e)}")
        send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {str(e)}")
        return None, None

def ensure_github_repo_exists():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    try:
        g = Github(GITHUB_TOKEN)
        user = g.get_user()
        
        try:
            repo = user.get_repo(REPO_NAME)
            logging.info(f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π {REPO_NAME} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return repo
        except github.GithubException as e:
            if e.status == 404:  # –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω
                logging.info(f"–°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π {REPO_NAME}")
                repo = user.create_repo(
                    name=REPO_NAME,
                    private=True,
                    description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±—ç–∫–∞–ø—ã Marzban –∏ AmneziaVPN",
                    auto_init=True
                )
                
                # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é backups
                try:
                    repo.create_file(
                        "backups/.gitkeep",
                        "Initial commit",
                        ""
                    )
                except github.GithubException:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                
                send_telegram_message(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π {REPO_NAME}")
                return repo
            else:
                raise
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/—Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {str(e)}")
        send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/—Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {str(e)}")
        return None

def upload_to_github(archive_name):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –±—ç–∫–∞–ø–∞ –Ω–∞ GitHub"""
    if not check_github_token():
        return False
        
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞—ë–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        repo = ensure_github_repo_exists()
        if not repo:
            return False
        
        # –°–æ–∑–¥–∞—ë–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è GitHub
        file_name = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        with open(archive_name, 'rb') as file:
            content = file.read()
            repo.create_file(
                f"backups/{file_name}",
                f"Backup {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
                content
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        repo_size = repo.size / 1024  # –†–∞–∑–º–µ—Ä –≤ –ú–ë
        if repo_size > 900:  # –ï—Å–ª–∏ –±–ª–∏–∑–∫–æ –∫ –ª–∏–º–∏—Ç—É –≤ 1GB
            send_telegram_message(f"‚ö†Ô∏è –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∑–∞–Ω–∏–º–∞–µ—Ç {repo_size:.2f}MB. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞.")
            
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ GitHub: {str(e)}")
        send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ GitHub: {str(e)}")
        return False

def cleanup(backup_dir, archive_name):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        shutil.rmtree(backup_dir)
        os.remove(archive_name)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {str(e)}")

def backup_job():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ç–∫–∞–ø–∞"""
    logging.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—ç–∫–∞–ø–∞")
    send_telegram_message("üîÑ –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞...")
    
    archive_name, backup_dir = create_backup()
    if archive_name and backup_dir:
        if upload_to_github(archive_name):
            send_telegram_message("‚úÖ –ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ GitHub")
        cleanup(backup_dir, archive_name)
    
    logging.info("–ü—Ä–æ—Ü–µ—Å—Å –±—ç–∫–∞–ø–∞ –∑–∞–≤–µ—Ä—à—ë–Ω")

async def get_chat_id():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ TELEGRAM_CHAT_ID"""
    try:
        bot = telegram.Bot(token=TELEGRAM_BOT_TOKEN)
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await bot.delete_webhook(drop_pending_updates=True)
        
        print("üëã –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat_id")
        
        while True:
            try:
                updates = await bot.get_updates(timeout=30, offset=-1, limit=1)
                if updates:
                    chat_id = updates[0].message.chat.id
                    print(f"\n‚úÖ –í–∞—à TELEGRAM_CHAT_ID: {chat_id}")
                    print(f"–î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ .env —Ñ–∞–π–ª –∫–∞–∫ TELEGRAM_CHAT_ID={chat_id}")
                    return chat_id
                await asyncio.sleep(1)
            except telegram.error.TimedOut:
                continue
            except telegram.error.RetryAfter as e:
                await asyncio.sleep(e.retry_after)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è chat_id: {str(e)}")
                logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è chat_id: {str(e)}")
                return None
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {str(e)}")
        return None

def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description='–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ç–∫–∞–ø–∞ Marzban –∏ AmneziaVPN')
    parser.add_argument('--init-repo', action='store_true', 
                       help='–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç—å GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –±—ç–∫–∞–ø–∞')
    parser.add_argument('--get-chat-id', action='store_true',
                       help='–ü–æ–ª—É—á–∏—Ç—å TELEGRAM_CHAT_ID')
    return parser.parse_args()

def init_repository():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    logging.info("–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
    send_telegram_message("üîÑ –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
    
    repo = ensure_github_repo_exists()
    if repo:
        send_telegram_message("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω/–ø—Ä–æ–≤–µ—Ä–µ–Ω")
        logging.info("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –±—ç–∫–∞–ø —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
        schedule.every(1).minutes.do(first_backup).tag('first_backup')
        while True:
            schedule.run_pending()
            time.sleep(1)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω –ª–∏ –ø–µ—Ä–≤—ã–π –±—ç–∫–∞–ø
            if not schedule.get_jobs('first_backup'):
                break
        return True
    return False

def first_backup():
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –±—ç–∫–∞–ø–∞"""
    backup_job()
    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –ø–µ—Ä–≤–æ–≥–æ –±—ç–∫–∞–ø–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    schedule.clear('first_backup')

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    args = parse_arguments()
    
    logging.info("–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞")
    
    if args.get_chat_id:
        if not TELEGRAM_BOT_TOKEN:
            print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ")
            return
        asyncio.run(get_chat_id())
        return
        
    if args.init_repo:
        if not all([GITHUB_TOKEN, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, REPO_NAME]):
            print("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env —Ñ–∞–π–ª–µ:")
            print("GITHUB_TOKEN, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, GITHUB_REPO_NAME")
            return
        init_repository()
        return
        
    if not all([GITHUB_TOKEN, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, REPO_NAME]):
        print("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env —Ñ–∞–π–ª–µ:")
        print("GITHUB_TOKEN, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, GITHUB_REPO_NAME")
        return
        
    send_telegram_message("üöÄ –°–∫—Ä–∏–ø—Ç –±—ç–∫–∞–ø–∞ –∑–∞–ø—É—â–µ–Ω")
    
    if not ensure_github_repo_exists():
        send_telegram_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GitHub —Ç–æ–∫–µ–Ω.")
        return
    
    schedule.every().hour.do(backup_job)
    
    while True:
        schedule.run_pending()
        time.sleep(60)

if __name__ == "__main__":
    main() 